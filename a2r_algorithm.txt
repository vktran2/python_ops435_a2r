Assignment2 - By Victor Tran
Python Script Name: ur_vktran2.py
Description
This python script shall accept and execute various filesnames as command line or optional parameters. In depth information will be given when using the --help option with the script.

The following modules will be used in the script:
OS -- used to allow use of the OS commands
SYS  -- will be used to accept command line arguments
argparse  -- will be used to assist the user on how to use the script, generating help messages and issue errors
datetime, time -- will be used in comparing dates

The main script will begin by setting a2r_vktran2.py.
Step 1
Argument parser shall be given consisting of:
Positional args: F
optional args: -h --help, -l {user,host} --list{user,host}, -r RHOST --rhost RHOST, -t {daily,weekly,monthly} --type {daily,weekly,monthly}, -u USER --user USER, -v --verbose
Step 2
Proper arguments read will determine the function needed to be executed through the use of if statements.
Step 3
The function executed will have its result printed.

Functions
form_dict(file_name)
1. Open and read the file given by the cli
2. extract all needed information and close the file
3. Save needed information in a dictionary

user_list(records, input)
* Uses optional arg '-l user' *
1. Get the needed information the dictionary made and the user input
2. Search the dictionary for a list of users
3. Output the users in a formatted list.

host_list(records, input)
* Uses optional arg '-l host' *
1. Get the needed information the dictionary made and the user input
2. Search the dictionary for a list of hosts
3. Output the hosts in a formatted list.

item_loop(record, records, items)
1. Get the needed information the dictionary made and the user input
2. Iterate through the function until the indexes of needed information is found and put them into two lists
3. Zip the two lists and then return as a list.

daily_user(records, input)
* Uses optional args '-u user -t daily' *
1. Get the needed information the dictionary made and the user input
2. Search the dictionary for the specified user
3. Output the user and amount of daily uptime in a formatted list.

daily_host(records, input)
* Uses optional args '-r host -t daily' *
1. Get the needed information the dictionary made and the user input
2. Search the dictionary for the specified host
3. Output the host and amount of daily uptime in a formatted list.

weekly_user(records, input)
* Uses optional args '-u user -t weekly' *
1. Get the needed information the dictionary made and the user input
2. Search the dictionary for the specified user
3. Output the user and amount of weekly uptime in a formatted list.

weekly_host(records, input)
* Uses optional args '-h host -t weekly' *
1. Get the needed information the dictionary made and the user input
2. Search the dictionary for the specified host
3. Output the host and amount of weekly uptime in a formatted list.
